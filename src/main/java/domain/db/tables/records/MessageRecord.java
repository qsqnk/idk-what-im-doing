/*
 * This file is generated by jOOQ.
 */
package domain.db.tables.records;


import domain.db.tables.Message;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageRecord extends UpdatableRecordImpl<MessageRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.message.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.message.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.message.sender</code>.
     */
    public void setSender(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.message.sender</code>.
     */
    public String getSender() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.message.content</code>.
     */
    public void setContent(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.message.content</code>.
     */
    public String getContent() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Message.MESSAGE.ID;
    }

    @Override
    public Field<String> field2() {
        return Message.MESSAGE.SENDER;
    }

    @Override
    public Field<String> field3() {
        return Message.MESSAGE.CONTENT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getSender();
    }

    @Override
    public String component3() {
        return getContent();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getSender();
    }

    @Override
    public String value3() {
        return getContent();
    }

    @Override
    public MessageRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public MessageRecord value2(String value) {
        setSender(value);
        return this;
    }

    @Override
    public MessageRecord value3(String value) {
        setContent(value);
        return this;
    }

    @Override
    public MessageRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessageRecord
     */
    public MessageRecord() {
        super(Message.MESSAGE);
    }

    /**
     * Create a detached, initialised MessageRecord
     */
    public MessageRecord(Long id, String sender, String content) {
        super(Message.MESSAGE);

        setId(id);
        setSender(sender);
        setContent(content);
    }
}
